generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips     Trip[]
}

model Trip {
  id          String     @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String
  userId      String
  shareLink   String     @unique @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  countries   Country[]
  documents   Document[]
  notes       Note[]
  photos      Photo[]
  layout      Layout?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Layout {
  id        String   @id @default(cuid())
  tripId    String   @unique
  content   Json     @db.JsonB // Stores the sections array with photo layouts and notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Country {
  id        String   @id @default(cuid())
  name      String
  code      String
  tripId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, code])
  @@index([tripId])
}

model Photo {
  id        String    @id @default(cuid())
  url       String
  caption   String?
  tripId    String
  takenAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order     Int       @default(autoincrement())
  trip      Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([order])
}

model Document {
  id        String    @id @default(cuid())
  type      String
  title     String
  url       String
  tripId    String
  date      DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  trip      Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  type      String
  tripId    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
}
